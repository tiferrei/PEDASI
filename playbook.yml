---
- hosts: default
  become_user: root
  become_method: sudo
  become: yes

  vars:
    project_dir: '/var/www/pedasi'
    venv_dir: '{{ project_dir }}/env'
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Test connection
      ping:

    # Setup MongoDB repo
    # sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
    - name: Import MongoDB repo key
      apt_key:
        keyserver: hkp://keyserver.ubuntu.com:80
        id: 9DA31620334BD75D9DCB49F368818C72E52529D4

    # echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
    - name: Add MongoDB repo to apt list
      apt_repository:
        repo: deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse
        filename: mongodb-org-4.0

    - name: Add Certbot repo
      apt_repository:
        repo: ppa:certbot/certbot

    - name: Update apt
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install apt prerequisites
      apt:
        name: '{{ packages }}'
        state: latest
        update_cache: yes
      vars:
        packages:
          - nginx
          - python3
          - python3-dev
          - python3-pip
          - python-virtualenv
          - git
          - mysql-server
          - libmysqlclient-dev
          - mongodb-org
          - goaccess
          - apache2-utils
          - python-certbot-nginx
          # Required for Ansible to setup DB
          - python3-mysqldb

    - name: Check if running under Vagrant
      stat:
        path: /vagrant
      register: vagrant_dir

    - name: Clone / update from local repo
      git:
        repo: '/vagrant'
        dest: '{{ project_dir }}'
      when: vagrant_dir.stat.exists == True

    - name: Clone / update branch from main repo
      git:
        repo: 'https://github.com/tiferrei/PEDASI.git'
        dest: '{{ project_dir }}'
        accept_hostkey: yes
        version: '{{ branch | default("dev") }}'
      when: vagrant_dir.stat.exists == False

    - name: Copy settings
      copy:
        src: '{{ env_file | default("deploy/.env") }}'
        dest: '{{ project_dir }}/.env'
        owner: www-data
        group: www-data
        mode: 0600

    - name: Set permissions on manage.py
      file:
        path: '{{ project_dir }}/manage.py'
        mode: 0755

    - name: Install pip requirements
      pip:
        requirements: '{{ project_dir}}/requirements.txt'
        virtualenv: '{{ venv_dir }}'
        virtualenv_python: python3

    - name: Restart and enable MariaDB
      systemd:
        name: mysql
        state: restarted
        enabled: yes
        daemon-reload: yes

    - name: Create default database
      mysql_db:
        name: 'pedasi'
        state: present

    - name: Create DB user
      mysql_user:
        name: 'pedasi'
        # TODO generate a real password
        password: 'pedasi'
        state: present
        priv: 'pedasi.*:ALL'

    - name: Set permissions on project directory
      file:
        path: '{{ project_dir }}'
        mode: 0775

    - name: Create static directory
      file:
        path: '{{ project_dir }}/static'
        state: directory
        owner: www-data
        group: www-data
        mode: 0775

    - name: Run Django migrations
      django_manage:
        command: migrate
        app_path: "{{ project_dir }}"
        virtualenv: "{{ venv_dir }}"

    - name: Install uWSGI
      pip:
        name: uwsgi
        state: latest

    - name: Setup uWSGI config
      file:
        path: /etc/uwsgi/sites
        state: directory
        mode: 0755

    - name: Copy web config files
      file:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        state: link
        force: yes
      with_items:
        - { src: '{{ project_dir }}/deploy/uwsgi/sites/pedasi.ini', dest: /etc/uwsgi/sites/pedasi.ini }
        - { src: '{{ project_dir }}/deploy/systemd/system/uwsgi.service', dest: /etc/systemd/system/uwsgi.service }

    - name: Deactivate default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Copy web config files
      copy:
        src: '{{ project_dir }}/deploy/nginx/sites-available/pedasi'
        dest: /etc/nginx/sites-available/pedasi
        remote_src: yes
        # WARNING: this will not update an existing file
        force: no

    - name: Activate Nginx site
      file:
        src: /etc/nginx/sites-available/pedasi
        dest: /etc/nginx/sites-enabled/pedasi
        state: link

    - name: Restart services
      systemd: name={{ item }} state=restarted
      with_items:
        - nginx
        - uwsgi
        - mongod

    - name: Set permissions on report.html
      file:
        path: "{{ project_dir }}/report.html"
        state: touch
        owner: www-data
        group: www-data

    # Interferes with wildcard server_name in dev deployment
    - name: Remove default Nginx server config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Open firewall
      ufw:
        rule: allow
        name: "{{ item }}"
        state: enabled
      with_items:
        - 'Nginx Full'
        - 'OpenSSH'

    - name: Setup Goaccess Cron job
      cron:
        name: "Generate Goaccess report"
        user: www-data
        state: present
        minute: "*/10"
        job: "{{ project_dir }}/scripts/goaccess.sh {{ project_dir }}/report.html"

    - name: Setup external API access counters reset Cron job
      cron:
        name: "Reset external API access counters"
        user: www-data
        state: present
        hour: 0
        minute: 0
        job: "{{ venv_dir }}/bin/python {{ project_dir }}/manage.py reset_api_count"

    - name: Compile documentation
      make:
        chdir: '{{ project_dir }}/docs'
        target: '{{ item }}'
        params:
          SPHINXBUILD: '{{ venv_dir }}/bin/sphinx-build'
          SPHINXAPIDOC: '{{ venv_dir }}/bin/sphinx-apidoc'
      loop:
      - clean
      - html

    - name: Django collect static files
      django_manage:
        command: collectstatic
        app_path: "{{ project_dir }}"
        virtualenv: "{{ venv_dir }}"
